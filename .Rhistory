evalServer.nb(con,"summary(z)")
evalServer(con,"z < rnorm(10^4)",return.res  = FALSE)
stopCluster(cl)
cl <- makeCluster(1)
clusterCall(cl,tmp,8002)
con <- socketConnection(port=8002)
evalServer(con,"z < rnorm(10^4)",return.res  = FALSE)
evalServer(con,"z < rnorm(10^4)")
evalServer(con,"z <- rnorm(10^4)")
evalServer(con,"summary(z)")
evalServer.nb(con,"z <- rnorm(10^4)",return.res=FALSE)
evalServer(con,"summary(z)")
stopCluster(cl)
cl <- makeCluster(1)
clusterCall(cl,tmp,8002)
con <- socketConnection(port=8002)
evalServer.nb(con,"z <- rnorm(10^4)",return.res=FALSE)
evalServer(con,"summary(z)")
stopCluster(cl)
cl <- makeCluster(1)
clusterCall(cl,tmp,8002)
con <- socketConnection(port=8002)
evalServer.nb(con,"y <- rnorm(10^4)",return.res=FALSE)
evalServer(con,"summary(y)")
stopCluster(cl)
cl <- makeCluster(1)
clusterCall(cl,tmp,8002)
con <- socketConnection(port=8002)
system.time(evalServer.nb(con,"y <- rnorm(10^7)",return.res=FALSE))
system.time(print(evalServer(con,"summary(y)")))
stopCluster(cl)
cl <- makeCluster(1)
clusterCall(cl,tmp,8002)
con <- socketConnection(port=8002)
system.time(evalServer.nb(con,"y <- rnorm(10^7)",return.res=FALSE))
system.time(print(evalServer.nb(con,"summary(y)")))
stopCluster(cl)
clusterCall
?clusterCall
?startSocketServer
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
}
cl <- makeCluster(1)
clusterCall(cl,tmp,8003)
con <- socketConnection(port=8003)
system.time(evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE))
system.time(print(evalServer.nb(con,"summary(y)")))
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
}
stopCluster(cl)
cl <- makeCluster(1)
clusterCall(cl,tmp,8005)
con <- socketConnection(port=8005)
system.time(evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE))
system.time(print(evalServer.nb(con,"summary(y)")))
stopCluster(cl)
go.socket <- function(expr,port = round(runif(1, min = 3000, max = 8000)),non.blocking=TRUE) {
browser()
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
}
clusterCall(cl,tmp,port)
con <- socketConnection(port=port)
evalServer.nb(con,expr,return.res=!non.blocking)
return(list(cluster = cl, con =con, port = port))
}
gs <- go.socket("z <- rnorm(10^3)")
port
port
socketConnection
expr
return.res=!non.blocking
return.res
evalServer.nb(gs$con,"summary(z)")
gs$con
port = round(runif(1, min = 3000, max = 8000))
port
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
}
clusterCall(cl,tmp,port)
con <- socketConnection(port=port)
expr = "z<-rnorm(10^3)"
evalServer.nb(con,expr,return.res=!non.blocking)
evalServer.nb(con,"summary(z)")
stopCluster(cl)
cl <- makeCluster(1)
clusterCall(cl,tmp,8007)
con <- socketConnection(port=8007)
system.time(evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE))
system.time(print(evalServer.nb(con,"summary(y)")))
stopCluster(cl)
port = round(runif(1, min = 8000, max = 8999)
)
port
stopCluster(cl)
cl <- makeCluster(1)
clusterCall(cl,tmp,3001)
con <- socketConnection(port=30014)
con <- socketConnection(port=3001)
system.time(evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE))
system.time(print(evalServer.nb(con,"summary(y)")))
stopCluster(cl)
port
stopCluster(cl)
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
}
clusterCall(cl,tmp,port)
con <- socketConnection(port=port)
evalServer.nb(con,expr,return.res=FALSE)
expr
evalServer(con,"summary(z)")
cl <- makeCluster(1)
clusterCall(cl,tmp,3001)
con <- socketConnection(port=3001)
system.time(evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE))
system.time(print(evalServer.nb(con,"summary(y)")))
stopCluster(cl)
stopCluster(cl)
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
}
tmp
clusterCAll
clusterCall
?clusterCall
cl
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE)
evalServer.nb(con,"summary(y)")
stopCluster(cl)
go.socket <- function(expr,port = round(runif(1, min = 3000, max = 8000))) {
#browser()
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,expr,return.res=FALSE)
#evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE)
#evalServer.nb(con,"summary(y)")
return(list(cluster = cl, con =con, port = port))
}
gs <- go.socket("z <- rnorm(10^3)")
con <- socketConnection(port=gs$port)
evalServer.nb(con,"summary(z)")
evalServer.nb(gs$con,"summary(z)")
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
}
stopCluster(cl)
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,expr,return.res=FALSE)
expr
evalServer.nb(con,"summary(z)")
port
port = 3500
stopCluster(cl)
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
}
svSocket::startSocketServer(port = x)
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
require(svSocket)
require(parallel)
cl <- makeCluster(1)
port = round(runif(1, min = 3000, max = 8000))
clusterCall(cl,tmp,port)
con <- socketConnection(port=port)
stopCluster(cl)
tmp
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
cl <- makeCluster(1)
port = round(runif(1, min = 3000, max = 8000))
clusterCall(cl,tmp,port)
con <- socketConnection(port=port)
system.time(evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE))
system.time(print(evalServer.nb(con,"summary(y)")))
stopCluster(cl)
cl <- makeCluster(1)
port = round(runif(1, min = 3000, max = 8000))
clusterCall(cl,tmp,port)
con <- socketConnection(port=port)
system.time(evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE))
system.time(print(evalServer.nb(con,"summary(y)")))
stopCluster(cl)
z <- rnorm(10^3)
expr = "z <- rnorm(10^3);"
expr = "z <- rnorm(10^3);"
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,expr,return.res=FALSE)
evalServer.nb(con,"summary(z)")
stopCluster(cl)
evalServer.nb(con,"z<-rnorm(10^3)",return.res=FALSE)
evalServer.nb(con,"summary(z)")
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,"z<-rnorm(10^3)",return.res=FALSE)
evalServer.nb(con,"summary(z)")
stopCluster(cl)
evalServer.nb(con,z <- rnorm(10^3),return.res=FALSE)
evalServer.nb(con,"summary(z)")
stopCluster(cl)
expr = "z <- rnorm(10^3);"
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
#evalServer.nb(con,"z<-rnorm(10^3)",return.res=FALSE)
evalServer.nb(con,z <- rnorm(10^3),return.res=FALSE)
evalServer.nb(con,"summary(z)")
deparse(z <- 1)
substitute("z <- 1")
substitute(z <- 1)
go.socket <- function(expr,port = round(runif(1, min = 3000, max = 8000))) {
#browser()
#expr = "z <- rnorm(10^3);"
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
#evalServer.nb(con,"z<-rnorm(10^3)",return.res=FALSE)
evalServer.nb(con,expr,return.res=FALSE)
#evalServer.nb(con,"summary(z)")
#stopCluster(cl)
#evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE)
#evalServer.nb(con,"summary(y)")
return(list(cluster = cl, con =con, port = port))
}
gs <- go.socket(z <- rnorm(10^3))
con <- socketConnection(port=gs$port)
evalServer.nb(con,"summary(z)")
evalServer.nb(con,summary(z))
evalServer.nb(gs$con,"summary(z)")
evalServer.nb(gs$con,summary(z))
substitute("z <- 1")
source('~/GitHub/gosocket/R/eval.nb.R')
source('~/GitHub/gosocket/R/eval.nb.R', echo=TRUE)
require(svSocket)
require(parallel)
cl <- makeCluster(1)
port = round(runif(1, min = 3000, max = 8000))
clusterCall(cl,tmp,port)
con <- socketConnection(port=port)
system.time(evalServer.nb(con,"y <- rnorm(10^3)",return.res=FALSE))
system.time(print(evalServer.nb(con,"summary(y)")))
is.character(x)
go.socket <- function(expr,port = round(runif(1, min = 3000, max = 8000))) {
#browser()
#expr = "z <- rnorm(10^3);"
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,expr,return.res=FALSE)
evalServer.nb(con,"summary(z)",return.res=FALSE)
return(list(cluster = cl, con =con, port = port))
}
go.socket <- function(expr,port = round(runif(1, min = 3000, max = 8000))) {
#browser()
#expr = "z <- rnorm(10^3);"
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,expr,return.res=FALSE)
evalServer.nb(con,"summary(z)",return.res=FALSE)
browser()
return(list(cluster = cl, con =con, port = port))
}
gs <- go.socket("z <- rnorm(10^3)")
expr
go.socket <- function(expr,port = round(runif(1, min = 3000, max = 8000))) {
#browser()
#expr = "z <- rnorm(10^3);"
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,expr,return.res=FALSE)
evalServer.nb(con,"summary(z)",return.res=FALSE)
browser()
return(list(cluster = cl, con =con, port = port))
}
gs <- go.socket("z <- rnorm(10^3)")
expr
substitute(expr)
?substitute
is.character(x)
deparse(x)
go.socket <- function(code,port = round(runif(1, min = 3000, max = 8000))) {
#browser()
#expr = "z <- rnorm(10^3);"
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,code,return.res=FALSE)
evalServer.nb(con,"summary(z)",return.res=FALSE)
browser()
return(list(cluster = cl, con =con, port = port))
}
gs <- go.socket("z <- rnorm(10^3)")
x
source('~/GitHub/gosocket/R/eval.nb.R')
source('~/GitHub/gosocket/R/eval.nb.R')
source('~/GitHub/gosocket/R/eval.nb.R')
source('~/GitHub/gosocket/R/eval.nb.R')
source('~/GitHub/gosocket/R/eval.nb.R')
source('~/GitHub/gosocket/R/eval.nb.R')
source('~/GitHub/gosocket/R/eval.nb.R')
source('~/GitHub/gosocket/R/eval.nb.R', echo=TRUE)
go.socket <- function(code,port = round(runif(1, min = 3000, max = 8000))) {
#browser()
#expr = "z <- rnorm(10^3);"
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,code,return.res=FALSE)
evalServer.nb(con,"summary(z)",return.res=FALSE)
browser()
return(list(cluster = cl, con =con, port = port))
}
gs <- go.socket("z <- rnorm(10^3)")
evalServer.nb(gs$con,"summary(z)")
source('~/GitHub/gosocket/R/eval.nb.R')
evalServer.nb(gs$con,"summary(z)")
go.socket <- function(code,port = round(runif(1, min = 3000, max = 8000))) {
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,code,return.res=FALSE)
return(list(cluster = cl, con =con, port = port))
}
go.socket <- function(code,port = round(runif(1, min = 3000, max = 8000))) {
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,code,return.res=FALSE)
return(list(cluster = cl, con =con, port = port))
}
close.go.socket <- function(gs) {
close(gs$con)
stopCluster(gs$cl)
}
gs <- go.socket("z <- rnorm(10^3)")
source('~/GitHub/gosocket/R/eval.nb.R')
evalServer.nb(gs$con,"summary(z)")
close.go.socket(gs)
system.time(gs <- go.socket("z <- rnorm(10^9)"))
system.time(print(evalServer.nb(gs$con,"summary(z)")))
evalServer.nb(con,"head(z)")
system.time(gs <- go.socket("z <- rnorm(10^7)"))
system.time(print(evalServer.nb(gs$con,"summary(z)")))
close.go.socket(gs)
system.time(rnorm(10^8))
close.go.socket(gs)
system.time(gs <- go.socket("z <- rnorm(10^8)"))
system.time(print(evalServer.nb(gs$con,"summary(z)")))
close.go.socket(gs)
system.time(gs <- go.socket("z <- rnorm(10^8)"))
require(svSocket)
require(parallel)
go.socket <- function(code,port = round(runif(1, min = 3000, max = 8000))) {
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
clusterCall(cl,tmp,x = port)
con <- socketConnection(port=port)
evalServer.nb(con,code,return.res=FALSE)
return(list(cluster = cl, con =con, port = port))
}
close.go.socket <- function(gs) {
close(gs$con)
stopCluster(gs$cl)
}
system.time(gs <- go.socket("z <- rnorm(10^8)"))
print("Oh yeah! Don't have to wait for it at all!")
system.time(print(evalServer.nb(gs$con,"summary(z)")))
close.go.socket(gs)
source('~/GitHub/gosocket/R/eval.nb.R')
