call.back.register
length(call.back.register$go.sockets)
shiny::runApp()
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
shiny::runApp()
length(call.back.register$go.sockets) == 1
length(call.back.register$go.sockets)
call.back.register$go.sockets
call.back.register$go.sockets[[1]] <- NULL
l <- length(call.back.register$go.sockets) + 1
l
shiny::runApp()
l
call.back.register$go.sockets
length(call.back.register$go.sockets)
gs
call.back.register$go.sockets[[1]] <- NULL
call.back.register
length(call.back.register$go.sockets)
length(call.back.register$go.sockets) == 1
length(call.back.register$go.sockets)
call.back.register$go.sockets
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
?reactiveTimer
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
shiny::runApp()
shiny::runApp()
evalServer
svSocket::socketClientConnection
?svSocket::socketClientConnection
svSocket::startSocketServer(port=1234)
getSocketClients()
getSocketClients(port=1234)
go.socket
gs <- go.socket()
gs <- go.socket
gs <- go.socket("svSocketClients('nihao',port=123)",port=123)
readLines(gs$con)
go.socket
close.go.socket(gs)
go.socket
svSocket::startSocketServer(port=124)
svSocket::sendSocketClients("abc",serverport=124)
svSocket::sendSocketClients("abc",serverport=124)
a <- socketConnection(port=124)
readLines(a)
svSocket::sendSocketClients("abc",serverport=124)
readLines(a)
gs <- go.socket("svSocketClients('nihao',serverport=126)",port=126)
readLines(gs$con)
close.go.socket(gs)
gs <- go.socket("svSocket::sendSocketClients('nihao',serverport=127)",port=127)
readLines(gs$con)
gs$con
svSocket::sendSocketClients
close.go.socket(gs)
svSocket::startSocketServer(port=128)
a <- socketConnection(port=128)
svSocket::sendSocketClients("nihao",serverport=128)
readLines(a)
stopSocketServer(port=128)
gs <- go.socket("svSocket::sendSocketClients('nihao',serverport=128);",port=128)
readLines(gs$con)
go.socket
close.go.socket(gs)
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
svSocket::startSocketServer(port = x)
return(TRUE)
}
port = 8300
clusterCall(cl, tmp, x = port)
con <- socketConnection(port = port)
code = "svSocket::sendSocketClients('nihao',serverport=128);"
evalServer.nb(con, code, blocking = FALSE)
readLines(con)
evalServer(con, code, blocking = FALSE)
evalServer(con, code)
evalServer(con, 'svSocket::sendSocketClients('nihao',serverport=128)')
evalServer(con, "svSocket::sendSocketClients('nihao',serverport=128)")
readLines(con)
con <- socketConnection(port = port)
evalServer(con, "svSocket::sendSocketClients('nihao',serverport=128)")
readLines(con)
svSocket::sendSocketClients('nihao',serverport=128)
svSocket::sendSocketClients('nihao',serverport=128);
readLines(con)
gs <- go.socket("write('a',file='c:/temp/h.txt')")
gs <- go.socket("write.csv('a',file='c:/temp/h.txt')")
"write.csv('a',file='c:/temp/h.txt')"
"write.csv('a',file='c:/temp/h.txt')
""
"
write.csv('a',file='c:/temp/h.txt')
gs <- go.socket("write('a',file='c:/temp/h.txt')")
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
gs <- go.socket("write('a',file='c:/temp/h.txt')")
gs <- go.socket("write('a',file='c:/temp/h.txt')")
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
source('~/GitHub/gosocket/R/evalServer.nb.R', echo=TRUE)
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/evalServer.nb.R', echo=TRUE)
gs <- go.socket("write('a',file='c:/temp/h.txt')")
require(gosocket)
gs <- go.socket("write('a',file='c:/temp/h.txt')")
source('~/GitHub/gosocket/R/go.socket.R')
x
cat("..Last.value <- try(eval(parse(text = \"", x, "\")));")
..Last.value <- try(eval(parse(text = " write('a',file='c:/temp/h.txt') ")));
close.go.socket(gs)
source('~/GitHub/gosocket/R/evalServer.nb.R')
gs <- go.socket("write(\"a\",file=\"c:/temp/h.txt\")")
gs <- go.socket("write('a',file='c:/temp/h.txt')")
processSocket
require(gosocket)
source('~/GitHub/gosocket/R/evalServer.nb.R', echo=TRUE)
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
processServer
?processServer
?processSocket
options(debug.Socket = TRUE).
options(debug.Socket = TRUE)
source('~/GitHub/gosocket/R/go.socket.R')
options(debug.Socket = TRUE)
gs <- go.socket("write('a',file='c:/temp/h.txt')")
options(debug.Socket = TRUE)
gs <- go.socket("write('a',file='c:/temp/h.txt')")
gs <- go.socket("write('a',file='c:/temp/h.txt')")
?processFun
?processSocket
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
?startSocketServer
source('~/GitHub/gosocket/R/go.socket.R')
x
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
x
cat(x, file = con, sep = "")
x
x
msg =
x
try(eval(parse(text = msg)));
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
x
processSocket1
processSocket1 <- function(msg, socket, serverport, ...) {
browser()
try(eval(parse(text = msg)));
}
?startSocketServer
source('~/GitHub/gosocket/R/go.socket.R')
svSocket::startSocketServer(port = 8201,procfun =processSocket1 )
a <- socketConnection(port = 8201)
code = "write('a',file='c:/temp/h.txt')"
?write
cat(code,file=a)
a
readLines(a)
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
svSocket::startSocketServer(port = 8201,procfun =processSocket1)
?startSocketServer
?svSocket::startSocketServer
gs <- go.socket("write('a',file='c:/temp/h.txt')")
require(gosocket)
gs <- go.socket("write('a',file='c:/temp/h.txt')")
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
?evalServer
gs <- go.socket("x <- 'a'")
source('~/GitHub/gosocket/R/go.socket.R')
evalServer(gs$con,x)
source('~/GitHub/gosocket/R/go.socket.R')
evalServer(gs$con,"x")
evalServer(gs$con,"x")
evalServer(gs$con,"x")
evalServer(gs$con,"x")
gs <- go.socket("x <- 'a'")
evalServer(gs$con,"x")
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/go.socket.R')
evalServer(gs$con,"x")
evalServer(gs$con,x)
source('~/GitHub/gosocket/R/go.socket.R')
gs <- go.socket("write.csv(1,file='c:/temp/h.txt');NULL")
evalServer(gs$con,x)
#esvSocket::startSocketServer(port = 8201,procfun =processSocket1)
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
gs <- go.socket("write.csv('1',file='c:/temp/h.txt');NULL")
gs <- go.socket("write.csv('1',file='c:/temp/h.txt');NULL")
source('~/GitHub/gosocket/R/go.socket.R')
evalServer(gs$con,"x <- '1'; write.csv(,file='c:/temp/h.txt');NULL")
evalServer(gs$con,"x <- '1'; write.csv(x,file='c:/temp/h.txt');NULL")
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/evalServer.nb.R')
gs <- go.socket("write.csv('1',file='c:/temp/h.txt');NULL")
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
gs <- go.socket("write.csv('1',file='c:/temp/h.txt');NULL")
code
source('~/GitHub/gosocket/R/go.socket.R')
evalServer(gs$con,"write.csv(1,file='c:/temp/h.txt');NULL")
evalServer(gs$con,"write.csv(1,file='c:/temp/h.txt');NULL")
source('~/GitHub/gosocket/R/go.socket.R')
evalServer(gs$con,"write.csv(1,file='c:/temp/h.txt');NULL")
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
source('~/GitHub/gosocket/R/evalServer.nb.R')
evalServer.nb(con,code,blocking=FALSE)
cat("..Last.value <- try(eval(parse(text = \"", x, "\"))); .f <- file(); ", file = con, sep = "")
cat("..Last.value <- try(eval(parse(text = \"", x, "\"))); .f <- file(); dump(\"..Last.value\", file = .f); ", file = con, sep = "")
x
cat("..Last.value <- try(eval(parse(text = \"", x, "\"))); .f <- file(); dump(\"..Last.value\", file = .f);  flush(.f); seek(.f, 0);", file = con, sep = "")
source('~/GitHub/gosocket/R/evalServer.nb.R')
cat("..Last.value <- try(eval(parse(text = \"", x, "\"))); .f <- file(); dump(\"..Last.value\", file = .f);  flush(.f); seek(.f, 0); cat(\"\\n<<<startflag>>>\", gsub(\"<pointer: [0-9a-fx]+>\", \"NULL\", readLines(.f)), \"<<<endflag>>>\\n\", sep = \"\\n\"); close(.f); rm(.f, ..Last.value); flush.console()\n", file = con, sep = "")
cat("..Last.value <- try(eval(parse(text = \"", x, "\"))); .f <- file(); dump(\"..Last.value\", file = .f); flush(.f); seek(.f, 0); cat(\"\\n<<<startflag>>>\", gsub(\"<pointer: [0-9a-fx]+>\", \"NULL\", readLines(.f)), \"<<<endflag>>>\\n\", sep = \"\\n\"); close(.f); rm(.f, ..Last.value); flush.console()\n",
file = con, sep = "")
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
cat("..Last.value <- try(eval(parse(text = \"", x, "\"))); .f <- file(); dump(\"..Last.value\", file = .f); flush(.f); seek(.f, 0); cat(\"\\n<<<startflag>>>\", gsub(\"<pointer: [0-9a-fx]+>\", \"NULL\", readLines(.f)), \"<<<endflag>>>\\n\", sep = \"\\n\"); close(.f); rm(.f, ..Last.value); flush.console()\n",
file = con, sep = "")
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
return('___non-blocking___')
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
?svSocket::sendSocketClients
source('~/GitHub/gosocket/R/go.socket.R')
code
readLines(gs$con)
con
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
readLines(gs$con)
readLines(gs$con)
gs$con
source('~/GitHub/gosocket/R/go.socket.R')
require(gosocket)
source('~/GitHub/gosocket/R/evalServer.nb.R', echo=TRUE)
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
readLines(gs$con)
readLines(gs$con)
readLines(gs$con)
readLines(gs$con)
readLines(gs$con)
readLines(gs$con)
readLines(gs$con)
source('~/GitHub/gosocket/R/go.socket.R')
close.go.socket(gs)
source('~/GitHub/gosocket/R/go.socket.R')
print(readLines(gs$con))
source('~/GitHub/gosocket/R/go.socket.R')
require(gosocket)
source('~/GitHub/gosocket/R/evalServer.nb.R', echo=TRUE)
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
source('~/GitHub/gosocket/R/go.socket.R')
require(gosocket)
source('~/GitHub/gosocket/R/evalServer.nb.R', echo=TRUE)
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/evalServer.nb.R')
require(gosocket)
source('~/GitHub/gosocket/R/evalServer.nb.R', echo=TRUE)
source('~/GitHub/gosocket/R/go.socket.R', echo=TRUE)
close.go.socket(gs)
#gs <- go.socket("write.csv('a',file='c:/temp/h.txt');NULL")
gs <- go.socket("write.csv('a',file='c:/temp/h.txt');NULL")
source('~/GitHub/gosocket/R/go.socket.R')
svSocket::sendSocketClients('gfsfsdfsfsdfsdf',serverport=8886)
print(readLines(gs$con))
readLines(gs$con)
readLines(gs$con)
con
gs$con
gs <- go.socket("svSocket::sendSocketClients('gfsfsdfsfsdfsdf',serverport=8888)",port=8888)
con
readLines(gs$con)
readLines(gs$con)
close.go.socket(gs)
gs <- go.socket("svSocket::sendSocketClients('gfsfsdfsfsdfsdf',serverport=8888)",port=8888)
close.go.socket(gs)
cl <- makeCluster(1)
tmp <- function(x) {
.Last <<- function() {
svSocket::stopSocketServer(port = x)
}
processSocket1 <- function(msg, socket, serverport, ...) {
browser()
try(eval(parse(text = msg)));
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/go.socket.R')
source('~/GitHub/gosocket/R/evalServer.nb.R')
library(gosocket)
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
class(a)
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
done
gs$con
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
done
library(gosocket)
library(gosocket)
gs <- go.socket("...done... <- TRUE")
evalServer(gs$con,"...done...")
evalServer.nb(gs$con,"...done...")
text = "...done..."
evalServer.nb(gs$con,text)
evalServer(gs$con,text)
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
done
gs
gs$con
setwd("~/GitHub/gosocket/inst/shiny-callback")
gs$con
shiny::runApp()
gs
evalServer.nb(gs$con,"...done...")
gs <- go.socket("...done... <- TRUE")
evalServer.nb("...done...")
evalServer.nb(gs$con,"...done...")
evalServer.nb(gs$con,"...done...")
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
evalServer.nb(gs$con,"...done...")
evalServer.nb(gs$con,"...done...")
gs <- go.socket("...done... <- TRUE;")
print(evalServer.nb(gs$con,"...done..."))
gs <- go.socket("...done... <- TRUE;")
print(evalServer.nb(gs$con,"...done..."))
print(evalServer.nb(gs$con,"...done..."))
print(evalServer.nb(gs$con,"...done..."))
gs <- go.socket("...done... <- TRUE;")
print(evalServer.nb(gs$con,"...done..."))
print(evalServer.nb(gs$con,"...done..."))
library(gosocket)
library(gosocket)
gs <- go.socket("...done... <- TRUE;")
require(gosocket)
gs <- go.socket("...done... <- TRUE;")
evalServer.nb("...done...",blocking=TRUE)
evalServer.nb(gs$con, "...done...",blocking=TRUE)
a = 1
flush.console()
source('~/GitHub/gosocket/R/evalServer.nb.R')
gs <- go.socket("...done... <- TRUE;")
evalServer.nb(gs$con, "...done...",blocking=TRUE)
source('~/GitHub/gosocket/R/evalServer.nb.R')
evalServer.nb(gs$con, "...done...",blocking=TRUE)
x
gs <- go.socket("...done...<- TRUE")
evalServer(gs$con,"...done...")
evalServer.nb(gs$con,"...done...")
gs <- go.socket("...done...<- TRUE;")
evalServer.nb(gs$con,"...done...")
gs <- go.socket("...done...<- TRUE")
evalServer.nb(gs$con,"...done...")
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
done
source('~/GitHub/gosocket/R/evalServer.nb.R')
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
shiny::runApp()
source('~/GitHub/gosocket/R/evalServer.nb.R')
source('~/GitHub/gosocket/R/evalServer.nb.R', echo=TRUE)
shiny::runApp()
tmpfile()
tmpdir
tmpdir()
tempdir()
tempfile()
?write
write(1,tempfile())
sprintf("write(1,'%s')",tmp.f)
tmp.f <- tempfile()
sprintf("write(1,'%s')",tmp.f)
reactiveFile
?reactiveFile
shiny:reactiveFile
shiny::reactiveFile
shiny::reactiveFileReader
?read
read.csv
?read.csv
?shiny::reactiveFileReader
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
shiny::runApp()
shiny::runApp()
sprintf("%s",code)
?write
write(1,'C:\\Users\\ZhuoJia\\AppData\\Local\\Temp\\RtmpG6uc5u\\file53c45f920b9')
str(gs)
l
gs
tmp.f <- tempfile()
code <- sprintf("write(1,'%s')",tmp.f)
gs <- go.socket(sprintf("%s",code))
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
tmp.f
code
cod
code
gs <- go.socket(sprintf("%s",code))
code
code <- sprintf("write(1,file='%s')",tmp.f)
gs <- go.socket(sprintf("%s",code))
code
code <- sprintf("write(1,file='%s')",tmp.f)
code
sprintf("%s",code)
gs <- go.socket(sprintf("%s",code))
?write
code <- sprintf("write.csv(1,file='%s')",tmp.f)
gs <- go.socket(sprintf("%s",code))
evalServer.nb(gs$con,code)
require(gosocket)
require(gosocket)
tmp.f <- tempfile()
tmp.f
write.csv(1,file=tmp.f)
write.csv(1,file='C:\\Users\\ZhuoJia\\AppData\\Local\\Temp\\RtmpwLbgXe\\fileb307367c5')
gs <- go.socket("write.csv(1,file='C:\\Users\\ZhuoJia\\AppData\\Local\\Temp\\RtmpwLbgXe\\fileb307367c5')")
write.csv(1,file='C:\\Users\\ZhuoJia\\AppData\\Local\\Temp\\RtmpwLbgXe\\fileb307367c5')
gs <- go.socket("write.csv(1,file='C:\\Users\\ZhuoJia\\AppData\\Local\\Temp\\RtmpwLbgXe\\fileb307367c5');")
gs <- go.socket("write.csv(1,file='C:\\Users\\ZhuoJia\\AppData\\Local\\Temp\\RtmpwLbgXe\\fileb307367c5');")
gs <- go.socket("write.csv('a',file='c:/temp/h.txt');NULL")
gs <- go.socket("write.csv('a',file='c:/temp/h.txt');NULL")
gs <- go.socket("write.csv(1,file='C:\\Users\\ZhuoJia\\AppData\\Local\\Temp\\RtmpwLbgXe\\fileb307367c5');NULL")
gs <- go.socket("write.csv(1,file='C:\\Users\\ZhuoJia\\AppData\\Local\\Temp\\RtmpwLbgXe\\fileb307367c5');NULL")
gs <- go.socket("write.csv(1,file='C:/Users/ZhuoJia/AppData/Local/Temp/RtmpwLbgXe/fileb307367c5');NULL")
tempfile
tempfile()
?tempfile
substr
replace
grep("\\")
grep("\\","c:\\x")
?grep
grep("\\","c:\\x")
gsub("\\","/","c:\\x")
gsub("\","/","c:\\x")
gsub("\","/","c:\x")
gsub("\\","/","c:\\")
gsub("\\","a","c:\\")
gsub("\\","/","c:\\")
gsub("\\","/","c:\\",fixed=TRUE)
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
tmp.f
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
setwd("~/GitHub/gosocket/inst/shiny-callback")
shiny::runApp()
